# -*- coding: utf-8 -*-
"""Parameter Excel Sheet Generation 1.ipynb

Automatically generated by Colaboratory.

Original file is located at
    https://colab.research.google.com/drive/1k_9FC-9FNN7qGwSLwEKu6Ec4aP0El-X0
"""

#import pyomo.environ as pyo
import pandas as pd
import numpy as np
import xlrd
import xlwt
import xlsxwriter
import xlwings as xw
import random
import time
import math

master = {}
scenarios = []
tests = []

for i in range(1,14):
    scenarios.append(i)
for i in range(1,6):
    tests.append(i)


# scenario: (nodes, time periods, density, budget)
master = {1: (20,50,.5,100),
         2: (10,50,.5,100),
         3: (25,50,.5,100),
         4: (20,40,.5,100),
         5: (20,60,.5,100),
         6: (20,70,.5,100),
         7: (20,50,.25,100),
         8: (20,50,.75,100),
         9: (20,50,1,100),
         10: (20,50,'lexical',100),
         11: (20,50,.5,50),
         12: (20,50,.5,150),
         13: (20,50,.5,200)}





# Create excel files
for scenario in scenarios:
    for test in tests:

        (num_nodes, num_time_periods, density, budget) = master[scenario]




        # V all nodes
        # V1 all nodes minus s
        V = [0]
        V1 = []
        for i in range(1,num_nodes+1):
            V.append(i)
            V1.append(i)
        # all arcs in network
        A = []
        for i in V:
            for j in V1:
                if density == 'lexical':
                    if i < j:
                        A.append((i,j))
                elif np.random.uniform(0,1) < density and i != j:
                    A.append((i,j))
                elif i == 0:
                    A.append((i,j))
        # T all time periods
        # T2 time periods for w variable creation
        # T3 time periods for value constraint
        T = []
        T2 = [0]
        for i in range(1,num_time_periods+1):
            T.append(i)
            T2.append(i)








        # Parameters
        f = 100
        # lower bound number of assets to recieve value at i during t
        l = {}
        for i in V1:
            for t in T:
                l[i,t] = math.ceil(2*(f/num_nodes))

        # value of i during t
        v = {}
        for i in V1:
            for t in T:
                v[i,t] = random.randint(5,20)

        # cost to send 1 asset from i to j during t
        c = {}
        for (i,j) in A:
            for t in T:
                c[((i,j),t)] = random.randint(1,5)
        # max capacity of assets on node i during t
        m = {}
        for i in V1:
            for t in T:
                m[(i,t)] = random.randint(20,40)
        # total amount of assets
        f = 100
        # number of assets at each node
        b = {0: f}
        for i in V1:
            b[i] = 0
        # max budget
        B = {}
        for t in T:
            B[t] = budget





        book = xlwt.Workbook()
        shtl = book.add_sheet("Lower Bound")
        shtv = book.add_sheet("Value")
        shtc = book.add_sheet("Cost")
        shtm = book.add_sheet("Max Capacity")
        shtB = book.add_sheet("Budget")





        #lower bound
        # Rows are nodes, Columns are time periods
        for row in range(len(V1)):
            for col in range(len(T)):
                shtl.write(row+1,col+1,l[V1[row],T[col]])

        for i in range(len(V1)):
            shtl.write(i+1, 0, V1[i])
        for i in range(len(T)):
            shtl.write(0, i+1, T[i])



        #Value
        for row in range(len(V1)):
            for col in range(len(T)):
                shtv.write(row+1,col+1,v[V1[row],T[col]])

        for i in range(len(V1)):
            shtv.write(i+1, 0, V1[i])
        for i in range(len(T)):
            shtv.write(0, i+1, T[i])




        #Cost
        for row in range(len(A)):
            for col in range(len(T)):
                shtc.write(row+1,col+1,c[A[row],T[col]])

        for i in range(len(A)):
            shtc.write(i+1, 0, f'{A[i]}')
        for i in range(len(T)):
            shtc.write(0, i+1, T[i])





        #Max Capacity
        for row in range(len(V1)):
            for col in range(len(T)):
                shtm.write(row+1,col+1,m[V1[row],T[col]])

        for i in range(len(V1)):
            shtm.write(i+1, 0, V1[i])
        for i in range(len(T)):
            shtm.write(0, i+1, T[i])





        #Budget
        for col in range(len(T)):
            shtB.write(1, col+1,B[T[col]])

        for i in range(len(T)):
            shtB.write(0, i+1, T[i])




        book.save(f"ParameterData_S{scenario}_T{test}.xls")



master = {}
scenarios = []
tests = []

for i in range(1,2):
    scenarios.append(i)
for i in range(1,6):
    tests.append(i)


# scenario: (nodes, time periods, density, budget)
master = {1: (20,50,.5,100)}





# Create excel files
for scenario in scenarios:
    for test in tests:

        (num_nodes, num_time_periods, density, budget) = master[scenario]




        # V all nodes
        # V1 all nodes minus s
        V = [0]
        V1 = []
        for i in range(1,num_nodes+1):
            V.append(i)
            V1.append(i)
        # all arcs in network
        A = []
        for i in V:
            for j in V1:
                if density == 'lexical':
                    if i < j:
                        A.append((i,j))
                elif np.random.uniform(0,1) < density and i != j:
                    A.append((i,j))
                elif i == 0:
                    A.append((i,j))
        # T all time periods
        # T2 time periods for w variable creation
        # T3 time periods for value constraint
        T = []
        T2 = [0]
        for i in range(1,num_time_periods+1):
            T.append(i)
            T2.append(i)








        # Parameters
        f = 100
        # lower bound number of assets to recieve value at i during t
        l = {}
        for i in V1:
            for t in T:
                l[i,t] = math.ceil(2*(f/num_nodes))

        # value of i during t
        v = {}
        for i in V1:
            num = random.randint(5,20)
            for t in T:
                v[i,t] = num

        # cost to send 1 asset from i to j during t
        c = {}
        for (i,j) in A:
            num = random.randint(1,5)
            for t in T:
                c[((i,j),t)] = num
        # max capacity of assets on node i during t
        m = {}
        for i in V1:
            num = random.randint(20,40)
            for t in T:
                m[(i,t)] = num
        # total amount of assets
        f = 100
        # number of assets at each node
        b = {0: f}
        for i in V1:
            b[i] = 0
        # max budget
        B = {}
        for t in T:
            B[t] = budget





        book = xlwt.Workbook()
        shtl = book.add_sheet("Lower Bound")
        shtv = book.add_sheet("Value")
        shtc = book.add_sheet("Cost")
        shtm = book.add_sheet("Max Capacity")
        shtB = book.add_sheet("Budget")





        #lower bound
        # Rows are nodes, Columns are time periods
        for row in range(len(V1)):
            for col in range(len(T)):
                shtl.write(row+1,col+1,l[V1[row],T[col]])

        for i in range(len(V1)):
            shtl.write(i+1, 0, V1[i])
        for i in range(len(T)):
            shtl.write(0, i+1, T[i])



        #Value
        for row in range(len(V1)):
            for col in range(len(T)):
                shtv.write(row+1,col+1,v[V1[row],T[col]])

        for i in range(len(V1)):
            shtv.write(i+1, 0, V1[i])
        for i in range(len(T)):
            shtv.write(0, i+1, T[i])




        #Cost
        for row in range(len(A)):
            for col in range(len(T)):
                shtc.write(row+1,col+1,c[A[row],T[col]])

        for i in range(len(A)):
            shtc.write(i+1, 0, f'{A[i]}')
        for i in range(len(T)):
            shtc.write(0, i+1, T[i])





        #Max Capacity
        for row in range(len(V1)):
            for col in range(len(T)):
                shtm.write(row+1,col+1,m[V1[row],T[col]])

        for i in range(len(V1)):
            shtm.write(i+1, 0, V1[i])
        for i in range(len(T)):
            shtm.write(0, i+1, T[i])





        #Budget
        for col in range(len(T)):
            shtB.write(1, col+1,B[T[col]])

        for i in range(len(T)):
            shtB.write(0, i+1, T[i])




        book.save(f"ParameterData_S14_T{test}.xls")

